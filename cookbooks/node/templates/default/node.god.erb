app_name = '<%= @app_name %>'
app_dir = "/data/#{app_name}"
node_env = '<%= @framework_env %>'
node_root = "#{app_dir}/current"
owner = '<%= @owner %>'
home = "/home/#{owner}"

bin_dir = "#{app_dir}/shared/bin"
shared_dir = "#{app_dir}/shared"

# Make sure Node app environment is built.
if File.exist?(node_root)
  puts `/data/#{app_name}/shared/bin/build_node_app_environment`
  puts `/data/#{app_name}/shared/bin/load_god_config`
end

port = '<%= @port %>'

God.watch do |w|
  w.name = "node-#{app_name}"
  w.group = app_name
  w.uid = owner
  w.gid = owner
  w.interval = 30.seconds
  w.log = "/var/log/engineyard/apps/#{app_name}/node.log"

  w.start = "#{shared_dir}/bin/start"
  w.stop = "/usr/bin/pkill -SIGTERM -g `cat /var/run/god/node-#{app_name}.pid`"
  w.restart = "#{shared_dir}/bin/restart" if File.exist?("#{shared_dir}/bin/restart")

  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = <%= @memory_limit %>.megabytes
      c.times = 2
    end
  end

  w.transition(:init, { true => :up, false => :start }) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
      c.interval = 5.seconds
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
    end
  end
end
